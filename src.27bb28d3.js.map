{"version":3,"sources":["index.js"],"names":["refs","daysSpan","document","querySelector","hoursSpan","minsSpan","secsSpan","CountdownTimer","constructor","selector","targetDate","setInterval","startTime","Date","now","deltaTime","updateClock","clearInterval","intervalId","elem","isActive","time","pad","days","Math","floor","hours","mins","secs","textContent","value","String","padStart","Object","values"],"mappings":";;;AA+CA,aAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,KAAA,EAAA,OAAA,eAAA,EAAA,EAAA,CAAA,MAAA,EAAA,YAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,GAAA,EAAA,EA/CA,QAAA,oBAEA,MAAMA,EAAO,CACXC,SAAUC,SAASC,cAAc,2BACjCC,UAAWF,SAASC,cAAc,4BAClCE,SAAUH,SAASC,cAAc,2BACjCG,SAAUJ,SAASC,cAAc,4BAGnC,MAAMI,EACJC,YAAYC,EAAUC,GAKPC,EAAAA,KAAAA,aAAAA,YAAY,KAEjBC,MAAAA,EAAYC,KAAKC,MACnBC,IAAAA,EAAY,KAAKL,WAAaE,EAC7BI,KAAAA,YAAYD,GAEbA,EAAY,MACdE,cAAc,KAAKC,YACdA,KAAAA,WAAa,OAGnBlB,EAAKM,WAfHa,KAAAA,KAAOjB,SAASC,cAAcM,GAC9BC,KAAAA,WAAaA,EACbU,KAAAA,UAAW,EAelBJ,YAAYK,GACJC,MAAAA,EAAM,KAAKA,IAEXC,EAAOD,EAAIE,KAAKC,MAAMJ,EAAQ,QAC9BK,EAAQJ,EAAIE,KAAKC,MAAOJ,EAAQ,MAAyB,OACzDM,EAAOL,EAAIE,KAAKC,MAAOJ,EAAQ,KAAoB,MACnDO,EAAON,EAAIE,KAAKC,MAAOJ,EAAQ,IAAc,MAEjDrB,EAAKC,SAAS4B,eAAiBN,IAC/BvB,EAAKI,UAAUyB,eAAiBH,IAChC1B,EAAKK,SAASwB,eAAiBF,IAC/B3B,EAAKM,SAASuB,eAAiBD,IAGnCN,IAAIQ,GACKC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,MAIrC,IAAIzB,KAAkB0B,OAAOC,OAAO,CAClCzB,SAAU,WACVC,WAAY,IAAIG,KAAK","file":"src.27bb28d3.js","sourceRoot":"../src","sourcesContent":["import './sass/main.scss';\n\nconst refs = {\n  daysSpan: document.querySelector(\"span[data-value='days']\"),\n  hoursSpan: document.querySelector(\"span[data-value='hours']\"),\n  minsSpan: document.querySelector(\"span[data-value='mins']\"),\n  secsSpan: document.querySelector(\"span[data-value='secs']\"),\n};\n\nclass CountdownTimer {\n  constructor(selector, targetDate) {\n    this.elem = document.querySelector(selector);\n    this.targetDate = targetDate;\n    this.isActive = false;\n  }\n    intervalId = setInterval(() => {\n  \n      const startTime = Date.now();\n      let deltaTime = this.targetDate - startTime;\n      this.updateClock(deltaTime);\n\n      if (deltaTime < 1000) {\n        clearInterval(this.intervalId);\n        this.intervalId = null;\n      };\n      \n    }, refs.secsSpan);\n\n  updateClock(time) {\n    const pad = this.pad;\n    \n    const days = pad(Math.floor(time / (1000 * 60 * 60 * 24)));\n    const hours = pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n    const mins = pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n    const secs = pad(Math.floor((time % (1000 * 60)) / 1000));\n\n      refs.daysSpan.textContent = `${days}`;\n      refs.hoursSpan.textContent = `${hours}`;\n      refs.minsSpan.textContent = `${mins}`;\n      refs.secsSpan.textContent = `${secs}`;\n  }\n\n  pad(value) {\n    return String(value).padStart(2, \"0\");\n  } \n}\n\nnew CountdownTimer(...Object.values({\n  selector: \"#timer-1\",\n  targetDate: new Date(\"Jul 17, 2021 12:22:00\"),\n}));\n\n\n"]}